Array Creation and Basics
Array.from()

Creates a new Array instance from an array-like or iterable object.
const arrayLike = 'hello';
const arr = Array.from(arrayLike);
console.log(arr); // ["h", "e", "l", "l", "o"]
Array.isArray()

Checks if a variable is an array.
console.log(Array.isArray([1, 2, 3])); // true
console.log(Array.isArray('hello')); // false
Adding and Removing Elements
push()

Adds one or more elements to the end of an array and returns the new length of the array.
const arr = [1, 2];
arr.push(3, 4);
console.log(arr); // [1, 2, 3, 4]
pop()

Removes the last element from an array and returns that element.
const arr = [1, 2, 3];
const lastElement = arr.pop();
console.log(lastElement); // 3
console.log(arr); // [1, 2]
unshift()

Adds one or more elements to the beginning of an array and returns the new length of the array.
const arr = [2, 3];
arr.unshift(0, 1);
console.log(arr); // [0, 1, 2, 3]
shift()

Removes the first element from an array and returns that element.
const arr = [1, 2, 3];
const firstElement = arr.shift();
console.log(firstElement); // 1
console.log(arr); // [2, 3]
Iteration
forEach()

Executes a provided function once for each array element.
const arr = [1, 2, 3];
arr.forEach((element) => {
  console.log(element);
});
// Output: 1, 2, 3
map()

Creates a new array populated with the results of calling a provided function on every element in the calling array.
const arr = [1, 2, 3];
const doubled = arr.map((num) => num * 2);
console.log(doubled); // [2, 4, 6]
Search and Filtering
filter()

Creates a new array with all elements that pass the test implemented by the provided function.
const arr = [1, 2, 3, 4];
const even = arr.filter((num) => num % 2 === 0);
console.log(even); // [2, 4]
find()

Returns the first element in the array that satisfies the provided testing function. Otherwise, it returns
undefined
.
const arr = [1, 2, 3, 4];
const found = arr.find((num) => num > 2);
console.log(found); // 3
findIndex()

Returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1.
const arr = [1, 2, 3, 4];
const index = arr.findIndex((num) => num > 2);
console.log(index); // 2
includes()

Determines whether an array includes a certain value among its entries, returning
true
or
false
as appropriate.
const arr = [1, 2, 3];
console.log(arr.includes(2)); // true
console.log(arr.includes(4)); // false
Transformation and Reduction
reduce()

Executes a reducer function (that you provide) on each element of the array, resulting in a single output value.
const arr = [1, 2, 3, 4];
const sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
console.log(sum); // 10
reduceRight()

Applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.
const arr = ['a', 'b', 'c'];
const result = arr.reduceRight((acc, curr) => acc + curr, '');
console.log(result); // 'cba'
Sorting and Reordering
sort()

Sorts the elements of an array in place and returns the sorted array.
 // const arr = [3, 1, 4, 1, 5];
 // arr.sort();
 // console.log(arr); // [1, 1, 3, 4, 5]

// Custom sort
const arr2 = [3, 1, 4, 1, 5];
arr2.sort((a, b) => a - b);
console.log(arr2); // [1, 1, 3, 4, 5]
reverse()

Reverses the order of the elements in an array in place.
const arr = [1, 2, 3];
arr.reverse();
console.log(arr); // [3, 2, 1]
Miscellaneous
concat()

Merges two or more arrays. This method does not change the existing arrays but instead returns a new array.
const arr1 = [1, 2];
const arr2 = [3, 4];
const combined = arr1.concat(arr2);
console.log(combined); // [1, 2, 3, 4]
slice()

Returns a shallow copy of a portion of an array into a new array object selected from
start
to
end
(end not included).
const arr = [1, 2, 3, 4, 5];
const sliced = arr.slice(1, 3);
console.log(sliced); // [2, 3]
splice()

Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
const arr = [1, 2, 3, 4];
const removed = arr.splice(2, 1);
console.log(arr); // [1, 2, 4]
console.log(removed); // [3]
join()

Joins all elements of an array into a string.
const arr = [1, 2, 3];
const joined = arr.join('-');
console.log(joined); // '1-2-3'
flat()

Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.
const arr = [1, [2, 3], [4, [5, 6]]];
const flattened = arr.flat(2);
console.log(flattened); // [1, 2, 3, 4, 5, 6]
flatMap()

First maps each element using a mapping function, then flattens the result into a new array.
const arr = [1, 2, 3];
const mapped = arr.flatMap(x => [x, x * 2]);
console.log(mapped); // [1, 2, 2, 4, 3, 6]
every()

Tests whether all elements in the array pass the test implemented by the provided function.
const arr = [1, 2, 3];
const allPositive = arr.every(num => num > 0);
console.log(allPositive); // true
some()

Tests whether at least one element in the array passes the test implemented by the provided function.
const arr = [1, 2, 3];
const hasNegative = arr.some(num => num < 0);
console.log(hasNegative); // false
